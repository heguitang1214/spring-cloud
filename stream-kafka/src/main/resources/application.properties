spring.application.name=spring-cloud-stream
server.port=9900

# kafka message \u4E3B\u9898\u8BBE\u7F6E
# \u8F93\u5165\u7BA1\u9053\u540D\u79F0 order_input\u5BF9\u5E94\u81EA\u5B9A\u4E49\u7684orderchannel\u7684\u540D\u79F0
spring.cloud.stream.bindings.order_input.destination=order
# \u8F93\u51FA\u7BA1\u9053\u540D\u79F0
spring.cloud.stream.bindings.order_output.destination=order
spring.cloud.stream.default-binder=kafka

# kafka\u751F\u4EA7\u8005\u3001\u6D88\u8D39\u8005\u3001\u8FDE\u63A5\u4FE1\u606F\u3001\u5E8F\u5217\u5316\u8BBE\u7F6E
# spring.kafka.bootstrap-servers=192.168.56.105:9092
spring.cloud.stream.kafka.binder.brokers=192.168.56.101:9092
spring.cloud.stream.kafka.binder.zkNodes=192.168.56.101:2181

# kafka\u6D88\u8D39\u8005\u7EC4\u914D\u7F6E
spring.kafka.consumer.group-id=consumerGroup
spring.kafka.producer.client-id=producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer








# kafka message \u4E3B\u9898\u8BBE\u7F6E
# \u8F93\u5165\u7BA1\u9053\u540D\u79F0
#spring.cloud.stream.bindings.order_input.destination=order
#spring.cloud.stream.bindings.order_input.binder=kafka1
# \u8F93\u51FA\u7BA1\u9053\u540D\u79F0
#spring.cloud.stream.bindings.order_output.destination=order
#spring.cloud.stream.bindings.order_output.binder=kafka2
#spring.cloud.stream.default-binder=kafka
#spring.cloud.stream.binders.kafka1.type=
#spring.cloud.stream.binders.kafka1.environment=
#spring.cloud.stream.binders.kafka2.type=
# kafka\u751F\u4EA7\u8005\u3001\u6D88\u8D39\u8005\u3001\u8FDE\u63A5\u4FE1\u606F\u3001\u5E8F\u5217\u5316\u8BBE\u7F6E
# spring.kafka.bootstrap-servers=192.168.56.105:9092
#spring.cloud.stream.kafka.binder.brokers=192.168.56.101:9092
#spring.cloud.stream.kafka.binder.zkNodes=192.168.56.101:2181
# \u662F\u5426\u5F00\u542F\u5206\u533A\u529F\u80FD
#spring.cloud.stream.bindings.order_input.consumer.partitioned=true
# \u5F53\u524D\u6D88\u8D39\u8005\u7684\u603B\u5B9E\u4F8B\u6570
#spring.cloud.stream.instance-count=2
# \u5F53\u524D\u5B9E\u4F8B\u7684\u7D22\u5F15\u53F7
#spring.cloud.stream.instance-index=0
# \u8BBE\u7F6E\u6D88\u606F\u5185\u5BB9\u7684\u7C7B\u578B
#spring.cloud.stream.bindings.output.contentType=
#spring.cloud.stream.bindings.output.destination=
#spring.cloud.stream.bindings.output.producer.partitionCount=
#spring.cloud.stream.bindings.order_input.group=consumerGroup


